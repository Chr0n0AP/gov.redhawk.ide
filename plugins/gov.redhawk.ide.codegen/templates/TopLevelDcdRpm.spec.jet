<%@ jet package="gov.redhawk.ide.codegen.jet"
imports="gov.redhawk.ide.codegen.RedhawkCodegenActivator
gov.redhawk.ide.codegen.util.ProjectCreator
java.util.Collections
java.util.List
mil.jpeojtrs.sca.dcd.DeviceConfiguration
mil.jpeojtrs.sca.partitioning.ComponentFile
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status"
class="TopLevelDcdRpmSpecTemplate"
skeleton="generator.skeleton"
%>
<%
    final DcdTemplateParameter params = (DcdTemplateParameter) argument;
    final DeviceConfiguration devCfg = params.getDcd();
    final String dcdFileName = devCfg.eResource().getURI().lastSegment();
    boolean iniFiles = false;
    for (String fileName : params.getFilesToInstall()) {
        if (fileName.endsWith(".ini")) {
            iniFiles = true;
        }
    }

    String devMgrName = "";
    final SoftPkg devMgrSoftPkg = devCfg.getDeviceManagerSoftPkg().getSoftPkg();
    if (devMgrSoftPkg != null) {
    	devMgrName = devMgrSoftPkg.getName();
    }
    final List<ComponentFile> componentFiles;
    if (devCfg.getComponentFiles() == null) {
    	componentFiles = Collections.emptyList();
    } else {
    	componentFiles = devCfg.getComponentFiles().getComponentFile();
    }
    if (devCfg.getName() == null || devCfg.getName().isEmpty()) {
        throw new CoreException(new Status(IStatus.ERROR, RedhawkCodegenActivator.PLUGIN_ID, "DCD file doesn't have a name set"));
    }
    final String nodeSubDir = "/dev/nodes/" + devCfg.getName().replace('.', '/');
    final String directoryBlock = ProjectCreator.createDirectoryBlock("%dir %{_prefix}/dev/nodes/" + devCfg.getName().replace('.', '/'));

    if (params.getHeaderContent() != null) {
%>
###############################################################################
<%
        for (String line : params.getHeaderContent().split("\n")) {
%>
# <%=line%>
<%
        }
%>
###############################################################################


<%
    }
%># RPM package for <%=devCfg.getName()%>

%global _sdrroot /var/redhawk/sdr
%global _prefix %{_sdrroot}

Name: <%=devCfg.getName()%>
Summary: Node <%=devCfg.getName()%>
Version: 1.0.0
Release: 1%{?dist}
License: None
Group: REDHAWK/Nodes
Source: %{name}-%{version}.tar.gz

# Require the device manager whose SPD is referenced
Requires: <%=devMgrName%>

# Require each referenced device/service
Requires:<%
    for (ComponentFile compFile : componentFiles) {
        SoftPkg softPkg = compFile.getSoftPkg();
        if (softPkg != null) {
        %> <%=softPkg.getName()%><%
        } else {
          throw new CoreException(new Status(IStatus.ERROR, RedhawkCodegenActivator.PLUGIN_ID, "Unable to locate component file. Check your SAD file and Target SDR."));
        }
    }
%>

BuildArch: noarch
BuildRoot: %{_tmppath}/%{name}-%{version}

%description
<%
    if (devCfg.getDescription() != null) {
%>
<%=devCfg.getDescription()%>
<%
    }
%>

%prep
%setup

%install
%__rm -rf $RPM_BUILD_ROOT
%__mkdir_p "$RPM_BUILD_ROOT%{_prefix}<%=nodeSubDir%>"
%__install -m 644 <%=dcdFileName%> $RPM_BUILD_ROOT%{_prefix}<%=nodeSubDir%>/<%=dcdFileName%>
<%
    for (String fileName : params.getFilesToInstall()) {
        if (fileName.endsWith(".ini")) {
%>
%__install -m 664 -D <%=fileName%> $RPM_BUILD_ROOT%{_sysconfdir}/redhawk/nodes.d/<%=fileName%>
<%
        } else {
%>
%__install -m 644 <%=fileName%> $RPM_BUILD_ROOT%{_prefix}<%=nodeSubDir%>/<%=fileName%>
<%
        }
    }
%>

%files
<%
    if (iniFiles) {
%>
%defattr(-,root,redhawk)
<%
        for (String fileName : params.getFilesToInstall()) {
            if (fileName.endsWith(".ini")) {
%>
%config(noreplace) %{_sysconfdir}/redhawk/nodes.d/<%=fileName%>
<%
            }
        }
    }
%>
%defattr(-,redhawk,redhawk)
<%=directoryBlock%>
%{_prefix}<%=nodeSubDir%>/<%=dcdFileName%>
<%
    for (String fileName : params.getFilesToInstall()) {
        if (!fileName.endsWith(".ini")) {
%>
%{_prefix}<%=nodeSubDir%>/<%=fileName%>
<%
        }
    }
%>
<%@ jet package="gov.redhawk.ide.codegen.jet"
imports="gov.redhawk.ide.codegen.RedhawkCodegenActivator
gov.redhawk.model.sca.util.ModelUtil
gov.redhawk.ide.codegen.util.ProjectCreator
java.util.List
mil.jpeojtrs.sca.util.ScaEcoreUtils
mil.jpeojtrs.sca.partitioning.ComponentFile
mil.jpeojtrs.sca.partitioning.PartitioningPackage
mil.jpeojtrs.sca.sad.SadPackage
mil.jpeojtrs.sca.sad.SoftwareAssembly
mil.jpeojtrs.sca.sad.SadComponentInstantiation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status"
class="TopLevelSadRpmSpecTemplate"
skeleton="../generator.skeleton"
%>
<%
    final SoftwareAssembly sad = (SoftwareAssembly) argument;
    
    // The assembly controller isn't specified initially after project creation; ignore if it's not specified, throw
    // an error if it is and we can't get the assembly controller
    final SadComponentInstantiation instance = (SadComponentInstantiation) ScaEcoreUtils.getFeature(sad, 
    		SadPackage.Literals.SOFTWARE_ASSEMBLY__ASSEMBLY_CONTROLLER, 
    		SadPackage.Literals.ASSEMBLY_CONTROLLER__COMPONENT_INSTANTIATION_REF, 
    		PartitioningPackage.Literals.COMPONENT_INSTANTIATION_REF__INSTANTIATION
    		);
    if (instance == null) {
    	return null;
    }
    final  SoftPkg controller = (SoftPkg) ScaEcoreUtils.getFeature(instance, 
    		PartitioningPackage.Literals.COMPONENT_INSTANTIATION__PLACEMENT,
    		PartitioningPackage.Literals.COMPONENT_PLACEMENT__COMPONENT_FILE_REF,
    		PartitioningPackage.Literals.COMPONENT_FILE_REF__FILE,
    		PartitioningPackage.Literals.COMPONENT_FILE__SOFT_PKG
    		);
    if (controller == null){
	    throw new CoreException(new Status(IStatus.ERROR, RedhawkCodegenActivator.PLUGIN_ID, "Unable to get assembly controller. Check your SAD file and Target SDR."));
    }
    
    final List<ComponentFile> componentFiles = sad.getComponentFiles().getComponentFile();
    final String waveformSubDir = "/dom/waveforms/" + sad.getName().replace('.', '/');
    final String directoryBlock = ProjectCreator.createDirectoryBlock("%dir %{_prefix}/dom/waveforms/" + sad.getName().replace('.', '/'));
%>
# RPM package for <%=sad.getName()%>

# By default, the RPM will install to the standard REDHAWK SDR root location (/var/redhawk/sdr)
# You can override this at install time using --prefix /new/sdr/root when invoking rpm (preferred method, if you must)
%{!?_sdrroot: %global _sdrroot /var/redhawk/sdr}
%define _prefix %{_sdrroot}
Prefix: %{_prefix}

Name: <%=sad.getName()%>
Summary: Waveform <%=sad.getName()%>
Version: <%=(sad.getVersion() != null && sad.getVersion().trim().length() > 0) ? sad.getVersion() : "1.0.0"%>
Release: 1%{?dist}
License: None
Group: REDHAWK/Waveforms
Source: %{name}-%{version}.tar.gz
# Require the controller whose SPD is referenced
Requires: <%=controller.getName()%>
# Require each referenced component
Requires:<%
    for (ComponentFile compFile : componentFiles) {
        SoftPkg softPkg = compFile.getSoftPkg();
        if (softPkg != null) {
        %> <%=softPkg.getName()%><%
        } else {
          throw new CoreException(new Status(IStatus.ERROR, RedhawkCodegenActivator.PLUGIN_ID, "Unable to locate component file. Check your SAD file and Target SDR."));
        }
    }
%>
BuildArch: noarch
BuildRoot: %{_tmppath}/%{name}-%{version}

%description
<%
    if (sad.getDescription() != null) {
%>
<%=sad.getDescription()%>
<%
    }
%>

%prep
%setup

%install
%__rm -rf $RPM_BUILD_ROOT
%__mkdir_p "$RPM_BUILD_ROOT%{_prefix}<%=waveformSubDir%>"
%__install -m 644 <%=ModelUtil.getResource(sad).getName()%> $RPM_BUILD_ROOT%{_prefix}<%=waveformSubDir%>/<%=ModelUtil.getResource(sad).getName()%>

%files
%defattr(-,redhawk,redhawk)
<%=directoryBlock%>
%{_prefix}<%=waveformSubDir%>/<%=ModelUtil.getResource(sad).getName()%>

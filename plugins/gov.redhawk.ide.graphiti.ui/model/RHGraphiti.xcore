//
// This file is protected by Copyright.
// Please refer to the COPYRIGHT file distributed with this source distribution.
//
// This file is part of REDHAWK IDE.
//
// All rights reserved.  This program and the accompanying materials are made available under
// the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html.
//

@Ecore(nsURI="http://www.redhawk.gov/model/rhgext/1.0.0")
@GenModel(prefix="RHGx", codeFormatting="true")
@GenModel(modelPluginVariables="org.eclipse.xtext.xbase.lib")
@GenModel(contentTypeIdentifier="http://www.redhawk.gov/model/rhgext/1.0.0")
@GenModel(operationReflection="false")
//prevents custom coding from getting blown away
@GenModel(modelDirectory="/gov.redhawk.ide.graphiti.ui/src-model")

package gov.redhawk.ide.graphiti.ext

import gov.redhawk.ide.graphiti.ui.diagram.patterns.AbstractContainerPattern
import org.eclipse.emf.ecore.EEList
import org.eclipse.graphiti.mm.pictograms.ContainerShape

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel
annotation "http://www.eclipse.org/emf/2002/Ecore" as Ecore
type ComponentSupportedInterfaceStub wraps mil.jpeojtrs.sca.partitioning.ComponentSupportedInterfaceStub
type IFeatureProvider wraps org.eclipse.graphiti.features.IFeatureProvider
type UsesPortStub wraps mil.jpeojtrs.sca.partitioning.UsesPortStub
type ProvidesPortStub wraps mil.jpeojtrs.sca.partitioning.ProvidesPortStub
type Port wraps mil.jpeojtrs.sca.sad.Port
type AssemblyController wraps mil.jpeojtrs.sca.sad.AssemblyController
type ExternalPorts wraps mil.jpeojtrs.sca.sad.ExternalPorts
type Reason wraps org.eclipse.graphiti.features.impl.Reason
type List<Port> wraps java.util.List
type SadComponentInstantiation wraps mil.jpeojtrs.sca.sad.SadComponentInstantiation
type IAddContext wraps org.eclipse.graphiti.features.context.IAddContext
type AbstractContainerPattern wraps AbstractContainerPattern
type IUpdateContext wraps org.eclipse.graphiti.features.context.IUpdateContext
type IColorConstant wraps org.eclipse.graphiti.util.IColorConstant
type Map wraps java.util.Map< String , String >
type ProvidesPortStatisticsMap wraps java.util.Map< String , BULKIO.PortStatistics >
type UsesPortStatisticsMap wraps java.util.Map< String , java.util.Map< String , BULKIO.PortStatistics > >

class RHContainerShape extends ContainerShape {

	/*If the component is started*/
	transient boolean started

	/*Is the component enabled?*/
	transient boolean enabled = "true"

	/*The severity of the component's status*/
	transient int iStatusSeverity

	/*This map is used to store color information for connections between redraws. This matters for instances such as
	 * when monitor ports is active, where a connection may need to have a specific color set at creation.*/
	transient Map connectionMap

	/*This map is used to the statistical information for provides ports provided by the port monitor service*/
	transient ProvidesPortStatisticsMap portStates

	/*This map is used to the statistical information for uses ports provided by the port monitor service*/
	transient UsesPortStatisticsMap connectionStates

	boolean hasSuperPortsContainerShape  //creates a single anchor on each side of container to represent ports
	boolean hasPortsContainerShape //creates a container that displays an anchor per port
	boolean hideUnusedPorts //hides all ports without connection
	
	op void init(IAddContext context, AbstractContainerPattern pattern) 
	op void init(IAddContext context, AbstractContainerPattern pattern, List<Port> externalPorts)
	
	/*Returns providesPortsStubs business object list linked to getProvidesPortsContainerShape()*/
	op EEList<ProvidesPortStub> getProvidesPortStubs()
	
	/*Returns providesPortsStubs business object list linked to getUsesPortsContainerShape()*/
	op EEList<UsesPortStub> getUsesPortStubs()
	
	/*performs a layout on the contents of this shape */
	op void layout()
	
	/*Updates the shape with supplied values */
	op Reason update(IUpdateContext context, AbstractContainerPattern pattern, List<Port> externalPorts)
	
	/*Updates the shape with supplied values */
	op Reason update(IUpdateContext context, AbstractContainerPattern pattern) 
		  
	/*Checks if shape requires an update.  
	 * If update required returns Reason with true
	 * boolean value and message describing what needs to be updated
	 */
	op Reason updateNeeded(IUpdateContext context, AbstractContainerPattern pattern, List<Port> externalPorts)
		  
	/*Checks if shape requires an update.  
	 * If update required returns Reason with true
	 * boolean value and message describing what needs to be updated
	 */
	op Reason updateNeeded(IUpdateContext context, AbstractContainerPattern pattern)
	
}

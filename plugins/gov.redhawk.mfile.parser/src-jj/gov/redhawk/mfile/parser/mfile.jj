options{  LOOKAHEAD= 1;  JDK_VERSION = "1.6";  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;  CACHE_TOKENS = true;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = true;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(MFileParser)package gov.redhawk.mfile.parser;import java.io.*;import java.util.*;import gov.redhawk.mfile.parser.model.*;public class MFileParser{  public static MFile parse(InputStream in, String encoding) throws ParseException, TokenMgrError  {    MFileParser parser = new MFileParser(in, encoding);    return parser.mFile();  }}PARSER_END(MFileParser)/* WHITE SPACE */SKIP :{  " "| "\t"}/**SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}
*/MORE :{  < "%{" (" ")* "\n" > : IN_MULTI_LINE_COMMENT}< IN_MULTI_LINE_COMMENT >SPECIAL_TOKEN :{  < MULTI_LINE_COMMENT : "%}" > : DEFAULT}< IN_MULTI_LINE_COMMENT >MORE :{  < ~[ ] >}MORE :{  < "#{" (" ")* "\n" > : IN_MULTI_LINE_COMMENT_2}< IN_MULTI_LINE_COMMENT_2 >SPECIAL_TOKEN :{  < MULTI_LINE_COMMENT_2 : "#}" > : DEFAULT}< IN_MULTI_LINE_COMMENT_2 >MORE :{  < ~[ ] >}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "%" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    )? >
}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT_2 :
    "#" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    )? >
}TOKEN :{  < FUNCTION : "function" >}MFile mFile() :{  MFile retVal = new MFile();  Function function;}{  (< NL >)*  [    function = function()    {      retVal.setFunction(function);      // TODO: Shortcut return MFile function definition
      return retVal;    }  ]  < EOF >  {    return retVal;  }}List < String > outputs() :{  List < String > strList = new ArrayList < String > ();  String id = null;}{  (    (      "[" [ strList = multiPart() ] "]"    )  | strList = multiPart()  )  {    return strList;  }}Function function() :{  Function function = new Function();  List < String > strList = null;  String id = null;}{  < FUNCTION >  (    LOOKAHEAD(2)    strList = outputs() "=" < ID >    {      function.getOutputs().addAll(strList);    }  | < ID >  )  {    function.setName(token.image);  }  [ functionArgs(function, strList) ] < NL >  {    return function;  }}void functionArgs(Function function, List < String > strList) :{
  String param;
}{  "(" (< NL >)*  (    < ID >    {
      param = token.image;      function.getInputs().add(param);    }
    (      "=" number(function, param)
    )?    [ "," ] (< NL >)*  )*  (")" [ ";" ])}

void number(Function function, String input) :
{}
{	< DECIMALINT >{  function.getInputDefaultValues().put(input, Integer.valueOf(token.image));
}
|  < FIXED_PT >{ function.getInputDefaultValues().put(input, Integer.valueOf(token.image));
}
|  < HEXADECIMALINT >{function.getInputDefaultValues().put(input, Integer.valueOf(token.image.substring(2), 16));
}
|  < FLOATONE >{function.getInputDefaultValues().put(input, Double.valueOf(token.image));
}
|  < FLOATTWO >
{function.getInputDefaultValues().put(input, Double.valueOf(token.image));
}
}List < String > multiPart() :
{
  List < String > retVal = new ArrayList < String > ();
}
{
  < ID >
  {
    retVal.add(token.image);
  }
  (
    [ "," ] < ID >
    {
      retVal.add(token.image);
    }
  )*
  {
    return retVal;
  }
}String singlePart() :{}{  < ID >  {    return token.image;  }}TOKEN :{  < NL : [ "\n", "\f", "\r" ] >}/* Definitions of complex regular expressions follow */TOKEN :{  < ID : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >| < DECIMALINT : ([ "0"-"9" ])+ ([ "u", "U", "l", "L" ])? >| < FIXED_PT :    (      [ "1"-"9" ] ([ "0"-"9" ])*    )    (      "." [ "1"-"9" ] ([ "0"-"9" ])*    )?    ([ "d", "D" ]) >| < HEXADECIMALINT :    (      "0x"    | "0X"    )    ([ "0"-"9", "a"-"f", "A"-"F" ])+ ([ "u", "U", "l", "L" ])? >| < FLOATONE :    (      ([ "0"-"9" ])+ "." ([ "0"-"9" ])*    | ([ "0"-"9" ])* "." ([ "0"-"9" ])+    )    (      [ "e", "E" ] ([ "-", "+" ])? ([ "0"-"9" ])+    )?    ([ "f", "F", "l", "L" ])? >| < FLOATTWO : ([ "0"-"9" ])+ [ "e", "E" ] ([ "-", "+" ])? ([ "0"-"9" ])+ ([ "f", "F", "l", "L" ])? >| < CHARACTER :    "'"    (      (~[ "'", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"" ]        | "0" ([ "0"-"7" ])*        | [ "1"-"9" ] ([ "0"-"9" ])*        |          (            "0x"          | "0X"          )          ([ "0"-"9", "a"-"f", "A"-"F" ])+        )      )    )    "'" >| < STRING :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"" ]        | "0" ([ "0"-"7" ])*        | [ "1"-"9" ] ([ "0"-"9" ])*        |          (            "0x"          | "0X"          )          ([ "0"-"9", "a"-"f", "A"-"F" ])+        )      )    )*    "\"" >}